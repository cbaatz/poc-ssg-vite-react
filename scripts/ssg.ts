import { Page, PageSpec } from "@/Page";
import { allPages } from "@/routes";
import fs from "node:fs/promises";
import { join as joinPath, dirname, resolve as resolvePath } from "node:path";
import { promisify } from "node:util";
import zlib from "node:zlib";
import { renderToString } from "react-dom/server";
import { dequal } from "dequal";
import x from "../vite.config";

async function build() {
  const outDir = x.build?.outDir;
  if (!outDir) throw new Error("No outDir specified in vite.config");

  // We use the index.html generated by the Vite client build as a template. To
  // pre-render the HTML and inline the page-specific path and data.
  console.log("\nBuilding static pages...");

  const template = await fs.readFile(resolvePath("./dist/index.html"), "utf8");

  for (const { path, spec: rawSpec } of allPages()) {
    const jsonString = JSON.stringify(rawSpec);

    // Ensure spec is valid after JSON serialization
    const jsonParsedSpec = JSON.parse(jsonString);
    const spec = PageSpec.parse(jsonParsedSpec);
    if (!dequal(spec, rawSpec)) {
      console.error(spec);
      throw new Error(`Page spec for ${path} is not JSON serializable`);
    }

    const appHtml = renderToString(Page({ spec }));
    const html = template
      .replace('<div id="root">', `<div id="root">${appHtml}`)
      .replace(
        "</body>",
        `<script id="__PAGE_SPEC__" type="application/json">${jsonString}</script>\n</body>`
      );

    const filePath =
      path === "/"
        ? joinPath(outDir, "index.html")
        : joinPath(outDir, path, "index.html");

    await fs.mkdir(dirname(filePath), { recursive: true });
    await fs.writeFile(filePath, html, "utf8");
    const { size, gzipSize } = await getFileSizes(filePath);
    console.log(
      `${filePath} ${formatSize(size)} (${formatSize(gzipSize)} gzipped)`
    );
  }
}

build().catch((err) => {
  console.error(err);
  process.exit(1);
});

const gzip = promisify(zlib.gzip);

async function getFileSizes(filePath: string) {
  const content = await fs.readFile(filePath);
  const stat = await fs.stat(filePath);
  const gzipped = await gzip(content);
  return {
    size: stat.size,
    gzipSize: gzipped.length,
  };
}

function formatSize(bytes: number): string {
  if (bytes >= 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
  return `${(bytes / 1024).toFixed(2)} kB`;
}
